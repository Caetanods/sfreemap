// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// transition_probabilities
arma::cube transition_probabilities(List Q_eigen, arma::vec edges, int omp);
RcppExport SEXP sfreemap_transition_probabilities(SEXP Q_eigenSEXP, SEXP edgesSEXP, SEXP ompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Q_eigen(Q_eigenSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< int >::type omp(ompSEXP);
    rcpp_result_gen = Rcpp::wrap(transition_probabilities(Q_eigen, edges, omp));
    return rcpp_result_gen;
END_RCPP
}
// func_H
arma::cube func_H(arma::mat multiplier, List Q_eigen, List tree, List tree_extra, int omp);
RcppExport SEXP sfreemap_func_H(SEXP multiplierSEXP, SEXP Q_eigenSEXP, SEXP treeSEXP, SEXP tree_extraSEXP, SEXP ompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type multiplier(multiplierSEXP);
    Rcpp::traits::input_parameter< List >::type Q_eigen(Q_eigenSEXP);
    Rcpp::traits::input_parameter< List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< List >::type tree_extra(tree_extraSEXP);
    Rcpp::traits::input_parameter< int >::type omp(ompSEXP);
    rcpp_result_gen = Rcpp::wrap(func_H(multiplier, Q_eigen, tree, tree_extra, omp));
    return rcpp_result_gen;
END_RCPP
}
// posterior_restricted_moment
arma::vec posterior_restricted_moment(NumericVector m, List tree, List tree_extra, List map, int omp);
RcppExport SEXP sfreemap_posterior_restricted_moment(SEXP mSEXP, SEXP treeSEXP, SEXP tree_extraSEXP, SEXP mapSEXP, SEXP ompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< List >::type tree_extra(tree_extraSEXP);
    Rcpp::traits::input_parameter< List >::type map(mapSEXP);
    Rcpp::traits::input_parameter< int >::type omp(ompSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_restricted_moment(m, tree, tree_extra, map, omp));
    return rcpp_result_gen;
END_RCPP
}
// fractional_likelihoods
List fractional_likelihoods(List tree, List tree_extra, arma::mat q, List q_eigen, arma::rowvec prior, NumericVector trans_prob, double tol);
RcppExport SEXP sfreemap_fractional_likelihoods(SEXP treeSEXP, SEXP tree_extraSEXP, SEXP qSEXP, SEXP q_eigenSEXP, SEXP priorSEXP, SEXP trans_probSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< List >::type tree_extra(tree_extraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type q_eigen(q_eigenSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trans_prob(trans_probSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fractional_likelihoods(tree, tree_extra, q, q_eigen, prior, trans_prob, tol));
    return rcpp_result_gen;
END_RCPP
}
